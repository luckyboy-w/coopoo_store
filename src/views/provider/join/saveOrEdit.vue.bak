<template>
	<div class="update-form-panel">
		<el-form ref="dataForm" :model="dataForm" label-width="140px">
			<el-form-item label="服务商等级">
				<el-select v-model="dataForm.provinceRole">
					<el-option
						v-for="item in provinceRoleList"
						:key="item.id"
						:value-key="item.providerLevel"
						:label="item.providerLevel"
						:value="item.id"
					></el-option>
				</el-select>
			</el-form-item>
			<el-form-item label="服务商名称">
				<el-input v-model="dataForm.provinceName"></el-input>
			</el-form-item>
			<el-form-item label="服务商编号">
				<el-input v-model="dataForm.provinceNo"></el-input>
			</el-form-item>
			<el-form-item label="手机号码">
				<el-input v-model="dataForm.mobileNo"></el-input>
			</el-form-item>
			<el-form-item label="推荐人电话">
				<el-input v-model="dataForm.referenceNo"></el-input>
			</el-form-item>

			<el-form-item label="身份证正面照片">
				<el-input v-show="true" v-model="dataForm.personFrontImg"></el-input>
				<el-upload
					:action="uploadFrontUrl"
					list-type="picture-card"
					:on-preview="handleFrontPreview"
					:before-upload="beforeFrontUpload"
					:on-success="handleFrontSuccess"
					:class="{hide:hideFrontUpload}"
					:on-remove="handleFrontRemove">
					<i class="el-icon-plus" ></i>
				</el-upload>
				<el-dialog >
					<img width="100%" :src="imageUrl" alt="">
				</el-dialog>
			</el-form-item>
			<el-form-item label="身份证反面照片">
				<el-input v-show="true" v-model="dataForm.personSideImg"></el-input>
				<el-upload
					:action="uploadSideUrl"
					list-type="picture-card"
					:on-preview="handleSidePreview"
					:before-upload="beforeSideUpload"
					:on-success="handleSideSuccess"
					:class="{hide:hideSideUpload}"
					:on-remove="handleSideRemove">
					<i class="el-icon-plus"></i>
				</el-upload>
				<el-dialog>
					<img width="100%" :src="imageUrl" alt="">
				</el-dialog>
			</el-form-item>
			<el-form-item label="文件协议">
				<el-input v-model="dataForm.protocalFile"></el-input>
				<el-upload
					:action="uploadProtocalUrl"
					:before-upload="beforeProtocalUpload"
					:on-success="handleProtocalSuccess"
					:on-remove="handleProtocalRemove"
					:file-list="protocalFileList">
					<el-button size="small" v-show="showAddProtocalIcon" type="primary">点击上传</el-button>
					<div slot="tip" class="el-upload__tip">只能上传jpg/png/pdf文件，且不超过5mb</div>
				</el-upload>
			</el-form-item>
			<el-form-item label="银行名称">
				<el-input v-model="dataForm.bankName"></el-input>
			</el-form-item>
			<el-form-item label="银行卡号">
				<el-input v-model="dataForm.cardNo"></el-input>
			</el-form-item>
			<el-form-item label="省份">
				<el-select v-model="dataForm.province" @change="loadCity">
					<el-option
						v-for="item in provinceList"
						:key="item.provinceid"
						
						:value-key="item.province"
						:label="item.province"
						:value="item.provinceid"
					></el-option>
				</el-select>
			</el-form-item>
			<el-form-item label="城市">
				<el-select v-model="dataForm.city">
					<el-option
						v-for="item in cityList"
						:key="item.cityid"
						:value-key="item.city"
						:label="item.city"
						:value="item.cityid"
					></el-option>
				</el-select>
			</el-form-item>

			<el-form-item>
				<el-button type="primary" @click="submitUpdate">添加</el-button>
				<el-button @click="cancelUpdate">取消</el-button>
			</el-form-item>
		</el-form>
	</div>
</template>

<script>
import { getMethod, postMethod, getUploadUrl } from "@/api/request";
import { isInteger } from "@/utils/validate";

export default {
	computed: {},
	mounted() {
		this.dataForm = this.editData;
		
		this.buildFrontGroupId()
		this.buildSideGroupId()
		this.buildProtocalGroupId()
		this.loadprovinceRoleList();
		this.loadprovinceList();
	},
	created() {},
	props: {
		editData: {
			type: Object,
			required: false
		}
	},
	data() {
		return {
			uploadUrl: '',
			uploadSideUrl: '',
			uploadProtocalUrl: '',
			uploadFrontUrl: '',
			provinceRoleList: [],
			provinceList: [],
			cityList: [],
			fileList:[],
			protocalFileList: [],
			imageUrl:'',
			hideFrontUpload:false,
			hideSideUpload:false,
			showAddProtocalIcon:true,
			personSideImgUrl: "",
			dataForm: {
				personFrontImg: "",
				personSideImg: "",
				provinceName: "111",
				provinceNo: "222",
				mobileNo: "333",
				referenceNo: "444",
				protocalFile: "",
				bankName: "555",
				cardNo: "666",
				provinceRole: "777",
				province: "888",
				city: "999",
				id: ""
			}
		};
	},
	methods: {
		buildFrontGroupId(){
			getMethod("/backend/oss/groupId", null).then(res => {
				this.uploadFrontUrl  = getUploadUrl()+"?groupId="+ res.data
				this.dataForm.personFrontImg = res.data
			});
		},
		handleFrontPreview(){
		},
		handleFrontRemove(res,b,c,d){
			for(let i = 0 ; i < this.fileList.length; i++ ){
				if(this.fileList[i].id == res.response.data.id){
					this.fileList.splice(i,1)
					break;
				}
			}
			this.hideFrontUpload = false
		},
		handleFrontSuccess(res, file) {
			this.fileList.push(res.data)
			let groupId = res.data.groupId
			let imageCnt = 0;
			for(let i = 0 ; i < this.fileList.length ; i++){
				if(this.fileList[i].groupId == groupId){
					imageCnt++
				}
			}
			if(imageCnt >= 2){
				this.hideFrontUpload = true
			}
		},
		beforeFrontUpload(file) {
			const fileTypeVerify = (file.type === "image/jpeg" || file.type === "image/png" || file.type === "application/pdf");
			const isLt2M = file.size / 1024 / 1024 < 5;

			if (!fileTypeVerify) {
				this.$message.error("上传文件只能是 JPG/PNG/PDF 格式!");
			}
			if (!isLt2M) {
				this.$message.error("上传文件大小不能超过 5MB!");
			}
			return fileTypeVerify && isLt2M;
		},
		buildSideGroupId(){
			getMethod("/backend/oss/groupId", null).then(res => {
				this.uploadSideUrl  = getUploadUrl()+"?groupId="+ res.data
				this.dataForm.personSideImg = res.data
			});
		},
		handleSidePreview(){
		},
		handleSideRemove(res){
			for(let i = 0 ; i < this.fileList.length; i++ ){
				if(this.fileList[i].id == res.response.data.id){
					this.fileList.splice(i,1)
					break;
				}
			}
			this.hideSideUpload = false
		},
		handleSideSuccess(res, file) {
			this.fileList.push(res.data)
			let groupId = res.data.groupId
			let imageCnt = 0;
			for(let i = 0 ; i < this.fileList.length ; i++){
				if(this.fileList[i].groupId == groupId){
					imageCnt++
				}
			}
			if(imageCnt >= 2){
				this.hideSideUpload = true
			}
		},
		beforeSideUpload(file) {
			const fileTypeVerify = (file.type === "image/jpeg" || file.type === "image/png" || file.type === "application/pdf");
			const isLt2M = file.size / 1024 / 1024 < 5;

			if (!fileTypeVerify) {
				this.$message.error("上传文件只能是 JPG/PNG/PDF 格式!");
			}
			if (!isLt2M) {
				this.$message.error("上传文件大小不能超过 5MB!");
			}
			return fileTypeVerify && isLt2M;
		},
		buildProtocalGroupId(){
			getMethod("/backend/oss/groupId", null).then(res => {
				this.uploadProtocalUrl  = getUploadUrl()+"?groupId="+ res.data
				debugger
				this.dataForm.protocalFile = res.data
			});
		},
		handleProtocalRemove(res){
			for(let i = 0 ; i < this.fileList.length; i++ ){
				if(this.fileList[i].id == res.data.id){
					this.fileList.splice(i,1)
					break;
				}
			}
			for(let i = 0 ; i < this.protocalFileList.length; i++ ){
				if(this.protocalFileList[i].id == res.data.id){
					this.protocalFileList.splice(i,1)
					break;
				}
			}
			this.showAddProtocalIcon = true
		},
		handleProtocalSuccess(res, file){
			res.data.name = file.name
			this.protocalFileList.push(res.data)
			this.fileList.push(res.data)
			let groupId = res.data.groupId
			let imageCnt = 0;
			for(let i = 0 ; i < this.fileList.length ; i++){
				if(this.fileList[i].groupId == groupId){
					imageCnt++
				}
			}
			if(imageCnt >= 2){
				this.showAddProtocalIcon = false
			}
		},
		beforeProtocalUpload(file) {
			const isJPG = (file.type === "image/jpeg" || file.type === "image/png" || file.type === "application/pdf");
			const isLt2M = file.size / 1024 / 1024 < 5;

			if (!isJPG) {
				this.$message.error("上传文件只能是 JPG/PNG/PDF 格式!");
			}
			if (!isLt2M) {
				this.$message.error("上传文件大小不能超过 5MB!");
			}
			return isJPG && isLt2M;
		},
		loadprovinceRoleList() {
			let scope = this;
			let param = {
				parentId: "-1"
			};
			getMethod("/backend/providerRole/findList", param).then(res => {
				scope.provinceRoleList = res.data;
			});
		},
		loadprovinceList() {
			let scope = this;
			let param = {
				parentId: "-1"
			};
			getMethod("/backend/areas/findProvince", param).then(res => {
				scope.provinceList = res.data;
			});
		},
		loadCity() {
			let scope = this;
			let param = {
				provinceid: this.dataForm.province
			};
			getMethod("/backend/areas/findCity", param).then(res => {
				scope.dataForm.city = ''
				scope.cityList = res.data;
			});
		},
		saveGoodType() {
			let scope = this;
			if (this.validate()) {
				delete this.dataForm.createTime;
				delete this.dataForm.createBy;
				postMethod("/backend/lyProvider/update", this.dataForm).then(
					res => {
						scope.typeList = res.data;
						this.$message({
							message: "操作成功",
							type: "success"
						});
						this.$emit("showListPanel", true);
					}
				);
			}
		},
		validate() {
			let notNvl = ["provinceName", "provinceNo", "mobileNo"];
			for (let i = 0; i < notNvl.length; i++) {
				if (this.dataForm[notNvl[i]] == "") {
					this.$message({
						message: "字段不能为空",
						type: "warning"
					});
					return false;
				}
			}

			let needInt = [];
			for (let i = 0; i < needInt.length; i++) {
				if (!isInteger(this.dataForm[needInt[i]])) {
					this.$message({
						message: "请输入正整数",
						type: "warning"
					});
					return false;
				}
			}

			return true;
		},
		cancelUpdate() {
			this.$emit("showListPanel", true);
		},
		submitUpdate() {
			this.saveGoodType();
		},
		beforeAvatarUpload(file) {
			const isJPG = file.type === "image/jpeg";
			const isLt2M = file.size / 1024 / 1024 < 10;

			if (!isJPG) {
				this.$message.error("上传图片只能是 JPG 格式!");
			}
			if (!isLt2M) {
				this.$message.error("上传图片大小不能超过 10MB!");
			}
			return isJPG && isLt2M;
		}
	}
};
</script>
<style lang="scss">
.update-form-panel {
	padding: 30px 20px;
	width: 600px;
}
.hide .el-upload--picture-card {
    display: none;
}
.avatar-uploader .el-upload {
	border: 1px dashed #d9d9d9;
	border-radius: 6px;
	cursor: pointer;
	position: relative;
	overflow: hidden;
}
.avatar-uploader .el-upload:hover {
	border-color: #409eff;
}
.avatar-uploader-icon {
	font-size: 28px;
	color: #8c939d;
	width: 178px;
	height: 178px;
	line-height: 178px;
	text-align: center;
}
.avatar {
	width: 178px;
	height: 178px;
	display: block;
}
</style>
